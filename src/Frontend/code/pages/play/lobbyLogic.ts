import { lobbySocketService } from "../../services/lobbySocketService";
//import { updateLobby } from "../../api/lobbyMatchAPI/updateLobbyAPI";
import { TLobby, TMapType, TMatchDuration, TMatchMode, TMatchPlayer} from "./lobbyTyping";
import { TournamentService} from "../../services/TournamentService";
import { ROLES, SIDES } from "../../match/matchSharedDependencies/sharedTypes"
import { TUserCustoms } from "../../match/matchSharedDependencies/SetupDependencies";
import { lobby } from "../../services/LobbyService";
import { matchService } from "../../services/matchService";
import { router } from "../../routes/router";

export type TTeam = {
    -readonly [key in keyof typeof ROLES]?: TPlayerInSlot | null //The shittiest fucking language I have ever seen in my life
}

export type TSlots = {
    -readonly [key in keyof typeof SIDES]?: TTeam
}

type TPlayerInSlot = {
    id: number,
    spriteID: number
}

export const LobbyLogic = {
    //Settings logic
    fetchAndSubmitSettings: async () => {
        if (!lobbySocketService.lobbyID) {
            throw Error("How the fuck did I get to this lobby without opening the socket??")
        }
        const map = (document.getElementById('match-map') as HTMLSelectElement).value;
        const mode = (document.getElementById('match-mode') as HTMLSelectElement).value;
        const duration = (document.getElementById('match-duration') as HTMLSelectElement).value;
        lobby.updateSettingsIN({
            map: map as TMapType,
            mode: mode as TMatchMode,
            duration: duration as TMatchDuration
        })
        console.log("New settings applied!")
    },

    fetchAndAddPlayerToSlot: async (settingsDialog: HTMLDialogElement,
            team: SIDES, role: ROLES): Promise<void> => {
        const form = settingsDialog.querySelector("form") as HTMLFormElement;
        if (!form.reportValidity()) return;
        const aliasInput = document.getElementById("player-alias") as HTMLInputElement;
        const alias = aliasInput.value;
        const spriteIdInput = document.getElementById("player-paddle") as HTMLInputElement;
        const spriteID = Number(spriteIdInput.value)
        lobby.addFriendlyPlayerIN({
            id: -1, //This is supposed to be generated by backend
            nickname: alias,
            spriteID: spriteID,
            team: team,
            role: role 
        });
        console.log(`Player saved with alias ${alias} and sprite id ${spriteID}`)
        console.log(`Player added to team ${team} and role ${role}!`)
    },

    prepareNextRound: async (settings: TLobby) => {
        //const participants = await LobbyLogic.getParticipants();
        //const pairings = TournamentService.getNextRoundPairings(participants);
        //TODO: start all games with the pairings
    },

}